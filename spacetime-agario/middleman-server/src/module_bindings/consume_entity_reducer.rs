// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#![allow(unused, clippy::all)]
use spacetimedb_sdk::__codegen::{self as __sdk, __lib, __sats, __ws};

use super::consume_entity_timer_type::ConsumeEntityTimer;

#[derive(__lib::ser::Serialize, __lib::de::Deserialize, Clone, PartialEq, Debug)]
#[sats(crate = __lib)]
pub(super) struct ConsumeEntityArgs {
    pub request: ConsumeEntityTimer,
}

impl From<ConsumeEntityArgs> for super::Reducer {
    fn from(args: ConsumeEntityArgs) -> Self {
        Self::ConsumeEntity {
            request: args.request,
        }
    }
}

impl __sdk::InModule for ConsumeEntityArgs {
    type Module = super::RemoteModule;
}

pub struct ConsumeEntityCallbackId(__sdk::CallbackId);

#[allow(non_camel_case_types)]
/// Extension trait for access to the reducer `consume_entity`.
///
/// Implemented for [`super::RemoteReducers`].
pub trait consume_entity {
    /// Request that the remote module invoke the reducer `consume_entity` to run as soon as possible.
    ///
    /// This method returns immediately, and errors only if we are unable to send the request.
    /// The reducer will run asynchronously in the future,
    ///  and its status can be observed by listening for [`Self::on_consume_entity`] callbacks.
    fn consume_entity(&self, request: ConsumeEntityTimer) -> __sdk::Result<()>;
    /// Register a callback to run whenever we are notified of an invocation of the reducer `consume_entity`.
    ///
    /// Callbacks should inspect the [`__sdk::ReducerEvent`] contained in the [`super::ReducerEventContext`]
    /// to determine the reducer's status.
    ///
    /// The returned [`ConsumeEntityCallbackId`] can be passed to [`Self::remove_on_consume_entity`]
    /// to cancel the callback.
    fn on_consume_entity(
        &self,
        callback: impl FnMut(&super::ReducerEventContext, &ConsumeEntityTimer) + Send + 'static,
    ) -> ConsumeEntityCallbackId;
    /// Cancel a callback previously registered by [`Self::on_consume_entity`],
    /// causing it not to run in the future.
    fn remove_on_consume_entity(&self, callback: ConsumeEntityCallbackId);
}

impl consume_entity for super::RemoteReducers {
    fn consume_entity(&self, request: ConsumeEntityTimer) -> __sdk::Result<()> {
        self.imp
            .call_reducer("consume_entity", ConsumeEntityArgs { request })
    }
    fn on_consume_entity(
        &self,
        mut callback: impl FnMut(&super::ReducerEventContext, &ConsumeEntityTimer) + Send + 'static,
    ) -> ConsumeEntityCallbackId {
        ConsumeEntityCallbackId(self.imp.on_reducer(
            "consume_entity",
            Box::new(move |ctx: &super::ReducerEventContext| {
                let super::ReducerEventContext {
                    event:
                        __sdk::ReducerEvent {
                            reducer: super::Reducer::ConsumeEntity { request },
                            ..
                        },
                    ..
                } = ctx
                else {
                    unreachable!()
                };
                callback(ctx, request)
            }),
        ))
    }
    fn remove_on_consume_entity(&self, callback: ConsumeEntityCallbackId) {
        self.imp.remove_on_reducer("consume_entity", callback.0)
    }
}

#[allow(non_camel_case_types)]
#[doc(hidden)]
/// Extension trait for setting the call-flags for the reducer `consume_entity`.
///
/// Implemented for [`super::SetReducerFlags`].
///
/// This type is currently unstable and may be removed without a major version bump.
pub trait set_flags_for_consume_entity {
    /// Set the call-reducer flags for the reducer `consume_entity` to `flags`.
    ///
    /// This type is currently unstable and may be removed without a major version bump.
    fn consume_entity(&self, flags: __ws::CallReducerFlags);
}

impl set_flags_for_consume_entity for super::SetReducerFlags {
    fn consume_entity(&self, flags: __ws::CallReducerFlags) {
        self.imp.set_call_reducer_flags("consume_entity", flags);
    }
}
