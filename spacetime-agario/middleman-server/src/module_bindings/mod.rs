// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#![allow(unused, clippy::all)]
use spacetimedb_sdk::__codegen::{self as __sdk, __lib, __sats, __ws};

pub mod circle_decay_reducer;
pub mod circle_decay_timer_table;
pub mod circle_decay_timer_type;
pub mod circle_recombine_reducer;
pub mod circle_recombine_timer_table;
pub mod circle_recombine_timer_type;
pub mod circle_table;
pub mod circle_type;
pub mod config_table;
pub mod config_type;
pub mod connect_reducer;
pub mod consume_entity_reducer;
pub mod consume_entity_timer_table;
pub mod consume_entity_timer_type;
pub mod db_vector_2_type;
pub mod disconnect_reducer;
pub mod enter_game_reducer;
pub mod entity_table;
pub mod entity_type;
pub mod food_table;
pub mod food_type;
pub mod logged_out_player_table;
pub mod move_all_players_reducer;
pub mod move_all_players_timer_table;
pub mod move_all_players_timer_type;
pub mod player_split_reducer;
pub mod player_table;
pub mod player_type;
pub mod respawn_reducer;
pub mod spawn_food_reducer;
pub mod spawn_food_timer_table;
pub mod spawn_food_timer_type;
pub mod suicide_reducer;
pub mod update_player_input_reducer;

pub use circle_decay_reducer::{circle_decay, set_flags_for_circle_decay, CircleDecayCallbackId};
pub use circle_decay_timer_table::*;
pub use circle_decay_timer_type::CircleDecayTimer;
pub use circle_recombine_reducer::{
    circle_recombine, set_flags_for_circle_recombine, CircleRecombineCallbackId,
};
pub use circle_recombine_timer_table::*;
pub use circle_recombine_timer_type::CircleRecombineTimer;
pub use circle_table::*;
pub use circle_type::Circle;
pub use config_table::*;
pub use config_type::Config;
pub use connect_reducer::{connect, set_flags_for_connect, ConnectCallbackId};
pub use consume_entity_reducer::{
    consume_entity, set_flags_for_consume_entity, ConsumeEntityCallbackId,
};
pub use consume_entity_timer_table::*;
pub use consume_entity_timer_type::ConsumeEntityTimer;
pub use db_vector_2_type::DbVector2;
pub use disconnect_reducer::{disconnect, set_flags_for_disconnect, DisconnectCallbackId};
pub use enter_game_reducer::{enter_game, set_flags_for_enter_game, EnterGameCallbackId};
pub use entity_table::*;
pub use entity_type::Entity;
pub use food_table::*;
pub use food_type::Food;
pub use logged_out_player_table::*;
pub use move_all_players_reducer::{
    move_all_players, set_flags_for_move_all_players, MoveAllPlayersCallbackId,
};
pub use move_all_players_timer_table::*;
pub use move_all_players_timer_type::MoveAllPlayersTimer;
pub use player_split_reducer::{player_split, set_flags_for_player_split, PlayerSplitCallbackId};
pub use player_table::*;
pub use player_type::Player;
pub use respawn_reducer::{respawn, set_flags_for_respawn, RespawnCallbackId};
pub use spawn_food_reducer::{set_flags_for_spawn_food, spawn_food, SpawnFoodCallbackId};
pub use spawn_food_timer_table::*;
pub use spawn_food_timer_type::SpawnFoodTimer;
pub use suicide_reducer::{set_flags_for_suicide, suicide, SuicideCallbackId};
pub use update_player_input_reducer::{
    set_flags_for_update_player_input, update_player_input, UpdatePlayerInputCallbackId,
};

#[derive(Clone, PartialEq, Debug)]

/// One of the reducers defined by this module.
///
/// Contained within a [`__sdk::ReducerEvent`] in [`EventContext`]s for reducer events
/// to indicate which reducer caused the event.

pub enum Reducer {
    CircleDecay { timer: CircleDecayTimer },
    CircleRecombine { timer: CircleRecombineTimer },
    Connect,
    ConsumeEntity { request: ConsumeEntityTimer },
    Disconnect,
    EnterGame { name: String, aptos_address: String },
    MoveAllPlayers { timer: MoveAllPlayersTimer },
    PlayerSplit,
    Respawn,
    SpawnFood { timer: SpawnFoodTimer },
    Suicide,
    UpdatePlayerInput { direction: DbVector2 },
}

impl __sdk::InModule for Reducer {
    type Module = RemoteModule;
}

impl __sdk::Reducer for Reducer {
    fn reducer_name(&self) -> &'static str {
        match self {
            Reducer::CircleDecay { .. } => "circle_decay",
            Reducer::CircleRecombine { .. } => "circle_recombine",
            Reducer::Connect => "connect",
            Reducer::ConsumeEntity { .. } => "consume_entity",
            Reducer::Disconnect => "disconnect",
            Reducer::EnterGame { .. } => "enter_game",
            Reducer::MoveAllPlayers { .. } => "move_all_players",
            Reducer::PlayerSplit => "player_split",
            Reducer::Respawn => "respawn",
            Reducer::SpawnFood { .. } => "spawn_food",
            Reducer::Suicide => "suicide",
            Reducer::UpdatePlayerInput { .. } => "update_player_input",
        }
    }
}
impl TryFrom<__ws::ReducerCallInfo<__ws::BsatnFormat>> for Reducer {
    type Error = __sdk::Error;
    fn try_from(value: __ws::ReducerCallInfo<__ws::BsatnFormat>) -> __sdk::Result<Self> {
        match &value.reducer_name[..] {
            "circle_decay" => Ok(
                __sdk::parse_reducer_args::<circle_decay_reducer::CircleDecayArgs>(
                    "circle_decay",
                    &value.args,
                )?
                .into(),
            ),
            "circle_recombine" => Ok(__sdk::parse_reducer_args::<
                circle_recombine_reducer::CircleRecombineArgs,
            >("circle_recombine", &value.args)?
            .into()),
            "connect" => Ok(__sdk::parse_reducer_args::<connect_reducer::ConnectArgs>(
                "connect",
                &value.args,
            )?
            .into()),
            "consume_entity" => Ok(__sdk::parse_reducer_args::<
                consume_entity_reducer::ConsumeEntityArgs,
            >("consume_entity", &value.args)?
            .into()),
            "disconnect" => Ok(
                __sdk::parse_reducer_args::<disconnect_reducer::DisconnectArgs>(
                    "disconnect",
                    &value.args,
                )?
                .into(),
            ),
            "enter_game" => Ok(
                __sdk::parse_reducer_args::<enter_game_reducer::EnterGameArgs>(
                    "enter_game",
                    &value.args,
                )?
                .into(),
            ),
            "move_all_players" => Ok(__sdk::parse_reducer_args::<
                move_all_players_reducer::MoveAllPlayersArgs,
            >("move_all_players", &value.args)?
            .into()),
            "player_split" => Ok(
                __sdk::parse_reducer_args::<player_split_reducer::PlayerSplitArgs>(
                    "player_split",
                    &value.args,
                )?
                .into(),
            ),
            "respawn" => Ok(__sdk::parse_reducer_args::<respawn_reducer::RespawnArgs>(
                "respawn",
                &value.args,
            )?
            .into()),
            "spawn_food" => Ok(
                __sdk::parse_reducer_args::<spawn_food_reducer::SpawnFoodArgs>(
                    "spawn_food",
                    &value.args,
                )?
                .into(),
            ),
            "suicide" => Ok(__sdk::parse_reducer_args::<suicide_reducer::SuicideArgs>(
                "suicide",
                &value.args,
            )?
            .into()),
            "update_player_input" => Ok(__sdk::parse_reducer_args::<
                update_player_input_reducer::UpdatePlayerInputArgs,
            >("update_player_input", &value.args)?
            .into()),
            unknown => {
                Err(
                    __sdk::InternalError::unknown_name("reducer", unknown, "ReducerCallInfo")
                        .into(),
                )
            }
        }
    }
}

#[derive(Default)]
#[allow(non_snake_case)]
#[doc(hidden)]
pub struct DbUpdate {
    circle: __sdk::TableUpdate<Circle>,
    circle_decay_timer: __sdk::TableUpdate<CircleDecayTimer>,
    circle_recombine_timer: __sdk::TableUpdate<CircleRecombineTimer>,
    config: __sdk::TableUpdate<Config>,
    consume_entity_timer: __sdk::TableUpdate<ConsumeEntityTimer>,
    entity: __sdk::TableUpdate<Entity>,
    food: __sdk::TableUpdate<Food>,
    logged_out_player: __sdk::TableUpdate<Player>,
    move_all_players_timer: __sdk::TableUpdate<MoveAllPlayersTimer>,
    player: __sdk::TableUpdate<Player>,
    spawn_food_timer: __sdk::TableUpdate<SpawnFoodTimer>,
}

impl TryFrom<__ws::DatabaseUpdate<__ws::BsatnFormat>> for DbUpdate {
    type Error = __sdk::Error;
    fn try_from(raw: __ws::DatabaseUpdate<__ws::BsatnFormat>) -> Result<Self, Self::Error> {
        let mut db_update = DbUpdate::default();
        for table_update in raw.tables {
            match &table_update.table_name[..] {
                "circle" => db_update.circle = circle_table::parse_table_update(table_update)?,
                "circle_decay_timer" => {
                    db_update.circle_decay_timer =
                        circle_decay_timer_table::parse_table_update(table_update)?
                }
                "circle_recombine_timer" => {
                    db_update.circle_recombine_timer =
                        circle_recombine_timer_table::parse_table_update(table_update)?
                }
                "config" => db_update.config = config_table::parse_table_update(table_update)?,
                "consume_entity_timer" => {
                    db_update.consume_entity_timer =
                        consume_entity_timer_table::parse_table_update(table_update)?
                }
                "entity" => db_update.entity = entity_table::parse_table_update(table_update)?,
                "food" => db_update.food = food_table::parse_table_update(table_update)?,
                "logged_out_player" => {
                    db_update.logged_out_player =
                        logged_out_player_table::parse_table_update(table_update)?
                }
                "move_all_players_timer" => {
                    db_update.move_all_players_timer =
                        move_all_players_timer_table::parse_table_update(table_update)?
                }
                "player" => db_update.player = player_table::parse_table_update(table_update)?,
                "spawn_food_timer" => {
                    db_update.spawn_food_timer =
                        spawn_food_timer_table::parse_table_update(table_update)?
                }

                unknown => {
                    return Err(__sdk::InternalError::unknown_name(
                        "table",
                        unknown,
                        "DatabaseUpdate",
                    )
                    .into());
                }
            }
        }
        Ok(db_update)
    }
}

impl __sdk::InModule for DbUpdate {
    type Module = RemoteModule;
}

impl __sdk::DbUpdate for DbUpdate {
    fn apply_to_client_cache(
        &self,
        cache: &mut __sdk::ClientCache<RemoteModule>,
    ) -> AppliedDiff<'_> {
        let mut diff = AppliedDiff::default();

        diff.circle = cache
            .apply_diff_to_table::<Circle>("circle", &self.circle)
            .with_updates_by_pk(|row| &row.entity_id);
        diff.circle_decay_timer = cache
            .apply_diff_to_table::<CircleDecayTimer>("circle_decay_timer", &self.circle_decay_timer)
            .with_updates_by_pk(|row| &row.scheduled_id);
        diff.circle_recombine_timer = cache
            .apply_diff_to_table::<CircleRecombineTimer>(
                "circle_recombine_timer",
                &self.circle_recombine_timer,
            )
            .with_updates_by_pk(|row| &row.scheduled_id);
        diff.config = cache
            .apply_diff_to_table::<Config>("config", &self.config)
            .with_updates_by_pk(|row| &row.id);
        diff.consume_entity_timer = cache
            .apply_diff_to_table::<ConsumeEntityTimer>(
                "consume_entity_timer",
                &self.consume_entity_timer,
            )
            .with_updates_by_pk(|row| &row.scheduled_id);
        diff.entity = cache
            .apply_diff_to_table::<Entity>("entity", &self.entity)
            .with_updates_by_pk(|row| &row.entity_id);
        diff.food = cache
            .apply_diff_to_table::<Food>("food", &self.food)
            .with_updates_by_pk(|row| &row.entity_id);
        diff.logged_out_player = cache
            .apply_diff_to_table::<Player>("logged_out_player", &self.logged_out_player)
            .with_updates_by_pk(|row| &row.identity);
        diff.move_all_players_timer = cache
            .apply_diff_to_table::<MoveAllPlayersTimer>(
                "move_all_players_timer",
                &self.move_all_players_timer,
            )
            .with_updates_by_pk(|row| &row.scheduled_id);
        diff.player = cache
            .apply_diff_to_table::<Player>("player", &self.player)
            .with_updates_by_pk(|row| &row.identity);
        diff.spawn_food_timer = cache
            .apply_diff_to_table::<SpawnFoodTimer>("spawn_food_timer", &self.spawn_food_timer)
            .with_updates_by_pk(|row| &row.scheduled_id);

        diff
    }
}

#[derive(Default)]
#[allow(non_snake_case)]
#[doc(hidden)]
pub struct AppliedDiff<'r> {
    circle: __sdk::TableAppliedDiff<'r, Circle>,
    circle_decay_timer: __sdk::TableAppliedDiff<'r, CircleDecayTimer>,
    circle_recombine_timer: __sdk::TableAppliedDiff<'r, CircleRecombineTimer>,
    config: __sdk::TableAppliedDiff<'r, Config>,
    consume_entity_timer: __sdk::TableAppliedDiff<'r, ConsumeEntityTimer>,
    entity: __sdk::TableAppliedDiff<'r, Entity>,
    food: __sdk::TableAppliedDiff<'r, Food>,
    logged_out_player: __sdk::TableAppliedDiff<'r, Player>,
    move_all_players_timer: __sdk::TableAppliedDiff<'r, MoveAllPlayersTimer>,
    player: __sdk::TableAppliedDiff<'r, Player>,
    spawn_food_timer: __sdk::TableAppliedDiff<'r, SpawnFoodTimer>,
}

impl __sdk::InModule for AppliedDiff<'_> {
    type Module = RemoteModule;
}

impl<'r> __sdk::AppliedDiff<'r> for AppliedDiff<'r> {
    fn invoke_row_callbacks(
        &self,
        event: &EventContext,
        callbacks: &mut __sdk::DbCallbacks<RemoteModule>,
    ) {
        callbacks.invoke_table_row_callbacks::<Circle>("circle", &self.circle, event);
        callbacks.invoke_table_row_callbacks::<CircleDecayTimer>(
            "circle_decay_timer",
            &self.circle_decay_timer,
            event,
        );
        callbacks.invoke_table_row_callbacks::<CircleRecombineTimer>(
            "circle_recombine_timer",
            &self.circle_recombine_timer,
            event,
        );
        callbacks.invoke_table_row_callbacks::<Config>("config", &self.config, event);
        callbacks.invoke_table_row_callbacks::<ConsumeEntityTimer>(
            "consume_entity_timer",
            &self.consume_entity_timer,
            event,
        );
        callbacks.invoke_table_row_callbacks::<Entity>("entity", &self.entity, event);
        callbacks.invoke_table_row_callbacks::<Food>("food", &self.food, event);
        callbacks.invoke_table_row_callbacks::<Player>(
            "logged_out_player",
            &self.logged_out_player,
            event,
        );
        callbacks.invoke_table_row_callbacks::<MoveAllPlayersTimer>(
            "move_all_players_timer",
            &self.move_all_players_timer,
            event,
        );
        callbacks.invoke_table_row_callbacks::<Player>("player", &self.player, event);
        callbacks.invoke_table_row_callbacks::<SpawnFoodTimer>(
            "spawn_food_timer",
            &self.spawn_food_timer,
            event,
        );
    }
}

#[doc(hidden)]
pub struct RemoteModule;

impl __sdk::InModule for RemoteModule {
    type Module = Self;
}

/// The `reducers` field of [`EventContext`] and [`DbConnection`],
/// with methods provided by extension traits for each reducer defined by the module.
pub struct RemoteReducers {
    imp: __sdk::DbContextImpl<RemoteModule>,
}

impl __sdk::InModule for RemoteReducers {
    type Module = RemoteModule;
}

#[doc(hidden)]
/// The `set_reducer_flags` field of [`DbConnection`],
/// with methods provided by extension traits for each reducer defined by the module.
/// Each method sets the flags for the reducer with the same name.
///
/// This type is currently unstable and may be removed without a major version bump.
pub struct SetReducerFlags {
    imp: __sdk::DbContextImpl<RemoteModule>,
}

impl __sdk::InModule for SetReducerFlags {
    type Module = RemoteModule;
}

/// The `db` field of [`EventContext`] and [`DbConnection`],
/// with methods provided by extension traits for each table defined by the module.
pub struct RemoteTables {
    imp: __sdk::DbContextImpl<RemoteModule>,
}

impl __sdk::InModule for RemoteTables {
    type Module = RemoteModule;
}

/// A connection to a remote module, including a materialized view of a subset of the database.
///
/// Connect to a remote module by calling [`DbConnection::builder`]
/// and using the [`__sdk::DbConnectionBuilder`] builder-pattern constructor.
///
/// You must explicitly advance the connection by calling any one of:
///
/// - [`DbConnection::frame_tick`].
/// - [`DbConnection::run_threaded`].
/// - [`DbConnection::run_async`].
/// - [`DbConnection::advance_one_message`].
/// - [`DbConnection::advance_one_message_blocking`].
/// - [`DbConnection::advance_one_message_async`].
///
/// Which of these methods you should call depends on the specific needs of your application,
/// but you must call one of them, or else the connection will never progress.
pub struct DbConnection {
    /// Access to tables defined by the module via extension traits implemented for [`RemoteTables`].
    pub db: RemoteTables,
    /// Access to reducers defined by the module via extension traits implemented for [`RemoteReducers`].
    pub reducers: RemoteReducers,
    #[doc(hidden)]
    /// Access to setting the call-flags of each reducer defined for each reducer defined by the module
    /// via extension traits implemented for [`SetReducerFlags`].
    ///
    /// This type is currently unstable and may be removed without a major version bump.
    pub set_reducer_flags: SetReducerFlags,

    imp: __sdk::DbContextImpl<RemoteModule>,
}

impl __sdk::InModule for DbConnection {
    type Module = RemoteModule;
}

impl __sdk::DbContext for DbConnection {
    type DbView = RemoteTables;
    type Reducers = RemoteReducers;
    type SetReducerFlags = SetReducerFlags;

    fn db(&self) -> &Self::DbView {
        &self.db
    }
    fn reducers(&self) -> &Self::Reducers {
        &self.reducers
    }
    fn set_reducer_flags(&self) -> &Self::SetReducerFlags {
        &self.set_reducer_flags
    }

    fn is_active(&self) -> bool {
        self.imp.is_active()
    }

    fn disconnect(&self) -> __sdk::Result<()> {
        self.imp.disconnect()
    }

    type SubscriptionBuilder = __sdk::SubscriptionBuilder<RemoteModule>;

    fn subscription_builder(&self) -> Self::SubscriptionBuilder {
        __sdk::SubscriptionBuilder::new(&self.imp)
    }

    fn try_identity(&self) -> Option<__sdk::Identity> {
        self.imp.try_identity()
    }
    fn connection_id(&self) -> __sdk::ConnectionId {
        self.imp.connection_id()
    }
}

impl DbConnection {
    /// Builder-pattern constructor for a connection to a remote module.
    ///
    /// See [`__sdk::DbConnectionBuilder`] for required and optional configuration for the new connection.
    pub fn builder() -> __sdk::DbConnectionBuilder<RemoteModule> {
        __sdk::DbConnectionBuilder::new()
    }

    /// If any WebSocket messages are waiting, process one of them.
    ///
    /// Returns `true` if a message was processed, or `false` if the queue is empty.
    /// Callers should invoke this message in a loop until it returns `false`
    /// or for as much time is available to process messages.
    ///
    /// Returns an error if the connection is disconnected.
    /// If the disconnection in question was normal,
    ///  i.e. the result of a call to [`__sdk::DbContext::disconnect`],
    /// the returned error will be downcastable to [`__sdk::DisconnectedError`].
    ///
    /// This is a low-level primitive exposed for power users who need significant control over scheduling.
    /// Most applications should call [`Self::frame_tick`] each frame
    /// to fully exhaust the queue whenever time is available.
    pub fn advance_one_message(&self) -> __sdk::Result<bool> {
        self.imp.advance_one_message()
    }

    /// Process one WebSocket message, potentially blocking the current thread until one is received.
    ///
    /// Returns an error if the connection is disconnected.
    /// If the disconnection in question was normal,
    ///  i.e. the result of a call to [`__sdk::DbContext::disconnect`],
    /// the returned error will be downcastable to [`__sdk::DisconnectedError`].
    ///
    /// This is a low-level primitive exposed for power users who need significant control over scheduling.
    /// Most applications should call [`Self::run_threaded`] to spawn a thread
    /// which advances the connection automatically.
    pub fn advance_one_message_blocking(&self) -> __sdk::Result<()> {
        self.imp.advance_one_message_blocking()
    }

    /// Process one WebSocket message, `await`ing until one is received.
    ///
    /// Returns an error if the connection is disconnected.
    /// If the disconnection in question was normal,
    ///  i.e. the result of a call to [`__sdk::DbContext::disconnect`],
    /// the returned error will be downcastable to [`__sdk::DisconnectedError`].
    ///
    /// This is a low-level primitive exposed for power users who need significant control over scheduling.
    /// Most applications should call [`Self::run_async`] to run an `async` loop
    /// which advances the connection when polled.
    pub async fn advance_one_message_async(&self) -> __sdk::Result<()> {
        self.imp.advance_one_message_async().await
    }

    /// Process all WebSocket messages waiting in the queue,
    /// then return without `await`ing or blocking the current thread.
    pub fn frame_tick(&self) -> __sdk::Result<()> {
        self.imp.frame_tick()
    }

    /// Spawn a thread which processes WebSocket messages as they are received.
    pub fn run_threaded(&self) -> std::thread::JoinHandle<()> {
        self.imp.run_threaded()
    }

    /// Run an `async` loop which processes WebSocket messages when polled.
    pub async fn run_async(&self) -> __sdk::Result<()> {
        self.imp.run_async().await
    }
}

impl __sdk::DbConnection for DbConnection {
    fn new(imp: __sdk::DbContextImpl<RemoteModule>) -> Self {
        Self {
            db: RemoteTables { imp: imp.clone() },
            reducers: RemoteReducers { imp: imp.clone() },
            set_reducer_flags: SetReducerFlags { imp: imp.clone() },
            imp,
        }
    }
}

/// A handle on a subscribed query.
// TODO: Document this better after implementing the new subscription API.
#[derive(Clone)]
pub struct SubscriptionHandle {
    imp: __sdk::SubscriptionHandleImpl<RemoteModule>,
}

impl __sdk::InModule for SubscriptionHandle {
    type Module = RemoteModule;
}

impl __sdk::SubscriptionHandle for SubscriptionHandle {
    fn new(imp: __sdk::SubscriptionHandleImpl<RemoteModule>) -> Self {
        Self { imp }
    }

    /// Returns true if this subscription has been terminated due to an unsubscribe call or an error.
    fn is_ended(&self) -> bool {
        self.imp.is_ended()
    }

    /// Returns true if this subscription has been applied and has not yet been unsubscribed.
    fn is_active(&self) -> bool {
        self.imp.is_active()
    }

    /// Unsubscribe from the query controlled by this `SubscriptionHandle`,
    /// then run `on_end` when its rows are removed from the client cache.
    fn unsubscribe_then(self, on_end: __sdk::OnEndedCallback<RemoteModule>) -> __sdk::Result<()> {
        self.imp.unsubscribe_then(Some(on_end))
    }

    fn unsubscribe(self) -> __sdk::Result<()> {
        self.imp.unsubscribe_then(None)
    }
}

/// Alias trait for a [`__sdk::DbContext`] connected to this module,
/// with that trait's associated types bounded to this module's concrete types.
///
/// Users can use this trait as a boundary on definitions which should accept
/// either a [`DbConnection`] or an [`EventContext`] and operate on either.
pub trait RemoteDbContext:
    __sdk::DbContext<
    DbView = RemoteTables,
    Reducers = RemoteReducers,
    SetReducerFlags = SetReducerFlags,
    SubscriptionBuilder = __sdk::SubscriptionBuilder<RemoteModule>,
>
{
}
impl<
        Ctx: __sdk::DbContext<
            DbView = RemoteTables,
            Reducers = RemoteReducers,
            SetReducerFlags = SetReducerFlags,
            SubscriptionBuilder = __sdk::SubscriptionBuilder<RemoteModule>,
        >,
    > RemoteDbContext for Ctx
{
}

/// An [`__sdk::DbContext`] augmented with a [`__sdk::Event`],
/// passed to [`__sdk::Table::on_insert`], [`__sdk::Table::on_delete`] and [`__sdk::TableWithPrimaryKey::on_update`] callbacks.
pub struct EventContext {
    /// Access to tables defined by the module via extension traits implemented for [`RemoteTables`].
    pub db: RemoteTables,
    /// Access to reducers defined by the module via extension traits implemented for [`RemoteReducers`].
    pub reducers: RemoteReducers,
    /// Access to setting the call-flags of each reducer defined for each reducer defined by the module
    /// via extension traits implemented for [`SetReducerFlags`].
    ///
    /// This type is currently unstable and may be removed without a major version bump.
    pub set_reducer_flags: SetReducerFlags,
    /// The event which caused these callbacks to run.
    pub event: __sdk::Event<Reducer>,
    imp: __sdk::DbContextImpl<RemoteModule>,
}

impl __sdk::AbstractEventContext for EventContext {
    type Event = __sdk::Event<Reducer>;
    fn event(&self) -> &Self::Event {
        &self.event
    }
    fn new(imp: __sdk::DbContextImpl<RemoteModule>, event: Self::Event) -> Self {
        Self {
            db: RemoteTables { imp: imp.clone() },
            reducers: RemoteReducers { imp: imp.clone() },
            set_reducer_flags: SetReducerFlags { imp: imp.clone() },
            event,
            imp,
        }
    }
}

impl __sdk::InModule for EventContext {
    type Module = RemoteModule;
}

impl __sdk::DbContext for EventContext {
    type DbView = RemoteTables;
    type Reducers = RemoteReducers;
    type SetReducerFlags = SetReducerFlags;

    fn db(&self) -> &Self::DbView {
        &self.db
    }
    fn reducers(&self) -> &Self::Reducers {
        &self.reducers
    }
    fn set_reducer_flags(&self) -> &Self::SetReducerFlags {
        &self.set_reducer_flags
    }

    fn is_active(&self) -> bool {
        self.imp.is_active()
    }

    fn disconnect(&self) -> __sdk::Result<()> {
        self.imp.disconnect()
    }

    type SubscriptionBuilder = __sdk::SubscriptionBuilder<RemoteModule>;

    fn subscription_builder(&self) -> Self::SubscriptionBuilder {
        __sdk::SubscriptionBuilder::new(&self.imp)
    }

    fn try_identity(&self) -> Option<__sdk::Identity> {
        self.imp.try_identity()
    }
    fn connection_id(&self) -> __sdk::ConnectionId {
        self.imp.connection_id()
    }
}

impl __sdk::EventContext for EventContext {}

/// An [`__sdk::DbContext`] augmented with a [`__sdk::ReducerEvent`],
/// passed to on-reducer callbacks.
pub struct ReducerEventContext {
    /// Access to tables defined by the module via extension traits implemented for [`RemoteTables`].
    pub db: RemoteTables,
    /// Access to reducers defined by the module via extension traits implemented for [`RemoteReducers`].
    pub reducers: RemoteReducers,
    /// Access to setting the call-flags of each reducer defined for each reducer defined by the module
    /// via extension traits implemented for [`SetReducerFlags`].
    ///
    /// This type is currently unstable and may be removed without a major version bump.
    pub set_reducer_flags: SetReducerFlags,
    /// The event which caused these callbacks to run.
    pub event: __sdk::ReducerEvent<Reducer>,
    imp: __sdk::DbContextImpl<RemoteModule>,
}

impl __sdk::AbstractEventContext for ReducerEventContext {
    type Event = __sdk::ReducerEvent<Reducer>;
    fn event(&self) -> &Self::Event {
        &self.event
    }
    fn new(imp: __sdk::DbContextImpl<RemoteModule>, event: Self::Event) -> Self {
        Self {
            db: RemoteTables { imp: imp.clone() },
            reducers: RemoteReducers { imp: imp.clone() },
            set_reducer_flags: SetReducerFlags { imp: imp.clone() },
            event,
            imp,
        }
    }
}

impl __sdk::InModule for ReducerEventContext {
    type Module = RemoteModule;
}

impl __sdk::DbContext for ReducerEventContext {
    type DbView = RemoteTables;
    type Reducers = RemoteReducers;
    type SetReducerFlags = SetReducerFlags;

    fn db(&self) -> &Self::DbView {
        &self.db
    }
    fn reducers(&self) -> &Self::Reducers {
        &self.reducers
    }
    fn set_reducer_flags(&self) -> &Self::SetReducerFlags {
        &self.set_reducer_flags
    }

    fn is_active(&self) -> bool {
        self.imp.is_active()
    }

    fn disconnect(&self) -> __sdk::Result<()> {
        self.imp.disconnect()
    }

    type SubscriptionBuilder = __sdk::SubscriptionBuilder<RemoteModule>;

    fn subscription_builder(&self) -> Self::SubscriptionBuilder {
        __sdk::SubscriptionBuilder::new(&self.imp)
    }

    fn try_identity(&self) -> Option<__sdk::Identity> {
        self.imp.try_identity()
    }
    fn connection_id(&self) -> __sdk::ConnectionId {
        self.imp.connection_id()
    }
}

impl __sdk::ReducerEventContext for ReducerEventContext {}

/// An [`__sdk::DbContext`] passed to [`__sdk::SubscriptionBuilder::on_applied`] and [`SubscriptionHandle::unsubscribe_then`] callbacks.
pub struct SubscriptionEventContext {
    /// Access to tables defined by the module via extension traits implemented for [`RemoteTables`].
    pub db: RemoteTables,
    /// Access to reducers defined by the module via extension traits implemented for [`RemoteReducers`].
    pub reducers: RemoteReducers,
    /// Access to setting the call-flags of each reducer defined for each reducer defined by the module
    /// via extension traits implemented for [`SetReducerFlags`].
    ///
    /// This type is currently unstable and may be removed without a major version bump.
    pub set_reducer_flags: SetReducerFlags,
    imp: __sdk::DbContextImpl<RemoteModule>,
}

impl __sdk::AbstractEventContext for SubscriptionEventContext {
    type Event = ();
    fn event(&self) -> &Self::Event {
        &()
    }
    fn new(imp: __sdk::DbContextImpl<RemoteModule>, _event: Self::Event) -> Self {
        Self {
            db: RemoteTables { imp: imp.clone() },
            reducers: RemoteReducers { imp: imp.clone() },
            set_reducer_flags: SetReducerFlags { imp: imp.clone() },
            imp,
        }
    }
}

impl __sdk::InModule for SubscriptionEventContext {
    type Module = RemoteModule;
}

impl __sdk::DbContext for SubscriptionEventContext {
    type DbView = RemoteTables;
    type Reducers = RemoteReducers;
    type SetReducerFlags = SetReducerFlags;

    fn db(&self) -> &Self::DbView {
        &self.db
    }
    fn reducers(&self) -> &Self::Reducers {
        &self.reducers
    }
    fn set_reducer_flags(&self) -> &Self::SetReducerFlags {
        &self.set_reducer_flags
    }

    fn is_active(&self) -> bool {
        self.imp.is_active()
    }

    fn disconnect(&self) -> __sdk::Result<()> {
        self.imp.disconnect()
    }

    type SubscriptionBuilder = __sdk::SubscriptionBuilder<RemoteModule>;

    fn subscription_builder(&self) -> Self::SubscriptionBuilder {
        __sdk::SubscriptionBuilder::new(&self.imp)
    }

    fn try_identity(&self) -> Option<__sdk::Identity> {
        self.imp.try_identity()
    }
    fn connection_id(&self) -> __sdk::ConnectionId {
        self.imp.connection_id()
    }
}

impl __sdk::SubscriptionEventContext for SubscriptionEventContext {}

/// An [`__sdk::DbContext`] augmented with a [`__sdk::Error`],
/// passed to [`__sdk::DbConnectionBuilder::on_disconnect`], [`__sdk::DbConnectionBuilder::on_connect_error`] and [`__sdk::SubscriptionBuilder::on_error`] callbacks.
pub struct ErrorContext {
    /// Access to tables defined by the module via extension traits implemented for [`RemoteTables`].
    pub db: RemoteTables,
    /// Access to reducers defined by the module via extension traits implemented for [`RemoteReducers`].
    pub reducers: RemoteReducers,
    /// Access to setting the call-flags of each reducer defined for each reducer defined by the module
    /// via extension traits implemented for [`SetReducerFlags`].
    ///
    /// This type is currently unstable and may be removed without a major version bump.
    pub set_reducer_flags: SetReducerFlags,
    /// The event which caused these callbacks to run.
    pub event: Option<__sdk::Error>,
    imp: __sdk::DbContextImpl<RemoteModule>,
}

impl __sdk::AbstractEventContext for ErrorContext {
    type Event = Option<__sdk::Error>;
    fn event(&self) -> &Self::Event {
        &self.event
    }
    fn new(imp: __sdk::DbContextImpl<RemoteModule>, event: Self::Event) -> Self {
        Self {
            db: RemoteTables { imp: imp.clone() },
            reducers: RemoteReducers { imp: imp.clone() },
            set_reducer_flags: SetReducerFlags { imp: imp.clone() },
            event,
            imp,
        }
    }
}

impl __sdk::InModule for ErrorContext {
    type Module = RemoteModule;
}

impl __sdk::DbContext for ErrorContext {
    type DbView = RemoteTables;
    type Reducers = RemoteReducers;
    type SetReducerFlags = SetReducerFlags;

    fn db(&self) -> &Self::DbView {
        &self.db
    }
    fn reducers(&self) -> &Self::Reducers {
        &self.reducers
    }
    fn set_reducer_flags(&self) -> &Self::SetReducerFlags {
        &self.set_reducer_flags
    }

    fn is_active(&self) -> bool {
        self.imp.is_active()
    }

    fn disconnect(&self) -> __sdk::Result<()> {
        self.imp.disconnect()
    }

    type SubscriptionBuilder = __sdk::SubscriptionBuilder<RemoteModule>;

    fn subscription_builder(&self) -> Self::SubscriptionBuilder {
        __sdk::SubscriptionBuilder::new(&self.imp)
    }

    fn try_identity(&self) -> Option<__sdk::Identity> {
        self.imp.try_identity()
    }
    fn connection_id(&self) -> __sdk::ConnectionId {
        self.imp.connection_id()
    }
}

impl __sdk::ErrorContext for ErrorContext {}

impl __sdk::SpacetimeModule for RemoteModule {
    type DbConnection = DbConnection;
    type EventContext = EventContext;
    type ReducerEventContext = ReducerEventContext;
    type SubscriptionEventContext = SubscriptionEventContext;
    type ErrorContext = ErrorContext;
    type Reducer = Reducer;
    type DbView = RemoteTables;
    type Reducers = RemoteReducers;
    type SetReducerFlags = SetReducerFlags;
    type DbUpdate = DbUpdate;
    type AppliedDiff<'r> = AppliedDiff<'r>;
    type SubscriptionHandle = SubscriptionHandle;

    fn register_tables(client_cache: &mut __sdk::ClientCache<Self>) {
        circle_table::register_table(client_cache);
        circle_decay_timer_table::register_table(client_cache);
        circle_recombine_timer_table::register_table(client_cache);
        config_table::register_table(client_cache);
        consume_entity_timer_table::register_table(client_cache);
        entity_table::register_table(client_cache);
        food_table::register_table(client_cache);
        logged_out_player_table::register_table(client_cache);
        move_all_players_timer_table::register_table(client_cache);
        player_table::register_table(client_cache);
        spawn_food_timer_table::register_table(client_cache);
    }
}
